/**
 */
package org.nasdanika.amur.lang.causality.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.nasdanika.amur.lang.causality.util.CausalityAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CausalityItemProviderAdapterFactory extends CausalityAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CausalityItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.CausalitySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CausalitySourceItemProvider causalitySourceItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.CausalitySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCausalitySourceAdapter() {
		if (causalitySourceItemProvider == null) {
			causalitySourceItemProvider = new CausalitySourceItemProvider(this);
		}

		return causalitySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.CausalityCC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CausalityCCItemProvider causalityCCItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.CausalityCC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCausalityCCAdapter() {
		if (causalityCCItemProvider == null) {
			causalityCCItemProvider = new CausalityCCItemProvider(this);
		}

		return causalityCCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.CausalityCP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CausalityCPItemProvider causalityCPItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.CausalityCP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCausalityCPAdapter() {
		if (causalityCPItemProvider == null) {
			causalityCPItemProvider = new CausalityCPItemProvider(this);
		}

		return causalityCPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.CausalityAP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CausalityAPItemProvider causalityAPItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.CausalityAP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCausalityAPAdapter() {
		if (causalityAPItemProvider == null) {
			causalityAPItemProvider = new CausalityAPItemProvider(this);
		}

		return causalityAPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.Template} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateItemProvider templateItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.Template}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateAdapter() {
		if (templateItemProvider == null) {
			templateItemProvider = new TemplateItemProvider(this);
		}

		return templateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.TranslationUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TranslationUnitItemProvider translationUnitItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.TranslationUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTranslationUnitAdapter() {
		if (translationUnitItemProvider == null) {
			translationUnitItemProvider = new TranslationUnitItemProvider(this);
		}

		return translationUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.Conditional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalItemProvider conditionalItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.Conditional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalAdapter() {
		if (conditionalItemProvider == null) {
			conditionalItemProvider = new ConditionalItemProvider(this);
		}

		return conditionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.ConditionalPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalPartItemProvider conditionalPartItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.ConditionalPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalPartAdapter() {
		if (conditionalPartItemProvider == null) {
			conditionalPartItemProvider = new ConditionalPartItemProvider(this);
		}

		return conditionalPartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.Iteration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IterationItemProvider iterationItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.Iteration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIterationAdapter() {
		if (iterationItemProvider == null) {
			iterationItemProvider = new IterationItemProvider(this);
		}

		return iterationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.Interpolation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterpolationItemProvider interpolationItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.Interpolation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterpolationAdapter() {
		if (interpolationItemProvider == null) {
			interpolationItemProvider = new InterpolationItemProvider(this);
		}

		return interpolationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.Evaluation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvaluationItemProvider evaluationItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.Evaluation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvaluationAdapter() {
		if (evaluationItemProvider == null) {
			evaluationItemProvider = new EvaluationItemProvider(this);
		}

		return evaluationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.When} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhenItemProvider whenItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.When}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhenAdapter() {
		if (whenItemProvider == null) {
			whenItemProvider = new WhenItemProvider(this);
		}

		return whenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.ParallelSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelSectionItemProvider parallelSectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.ParallelSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelSectionAdapter() {
		if (parallelSectionItemProvider == null) {
			parallelSectionItemProvider = new ParallelSectionItemProvider(this);
		}

		return parallelSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.SequentialSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequentialSectionItemProvider sequentialSectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.SequentialSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequentialSectionAdapter() {
		if (sequentialSectionItemProvider == null) {
			sequentialSectionItemProvider = new SequentialSectionItemProvider(this);
		}

		return sequentialSectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.amur.lang.causality.SynchronousSection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronousSectionItemProvider synchronousSectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.amur.lang.causality.SynchronousSection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchronousSectionAdapter() {
		if (synchronousSectionItemProvider == null) {
			synchronousSectionItemProvider = new SynchronousSectionItemProvider(this);
		}

		return synchronousSectionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (causalitySourceItemProvider != null) causalitySourceItemProvider.dispose();
		if (causalityCCItemProvider != null) causalityCCItemProvider.dispose();
		if (causalityCPItemProvider != null) causalityCPItemProvider.dispose();
		if (causalityAPItemProvider != null) causalityAPItemProvider.dispose();
		if (templateItemProvider != null) templateItemProvider.dispose();
		if (translationUnitItemProvider != null) translationUnitItemProvider.dispose();
		if (conditionalItemProvider != null) conditionalItemProvider.dispose();
		if (conditionalPartItemProvider != null) conditionalPartItemProvider.dispose();
		if (iterationItemProvider != null) iterationItemProvider.dispose();
		if (textItemProvider != null) textItemProvider.dispose();
		if (interpolationItemProvider != null) interpolationItemProvider.dispose();
		if (evaluationItemProvider != null) evaluationItemProvider.dispose();
		if (whenItemProvider != null) whenItemProvider.dispose();
		if (parallelSectionItemProvider != null) parallelSectionItemProvider.dispose();
		if (sequentialSectionItemProvider != null) sequentialSectionItemProvider.dispose();
		if (synchronousSectionItemProvider != null) synchronousSectionItemProvider.dispose();
	}

}
